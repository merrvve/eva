---
import Center from "../Center.astro";
import { Icon } from "../Icon/Icon";
import Logo from "./Logo.astro";

const currentPath = Astro.url.pathname;
const topLevelPath = currentPath.split("/")[1];

const navigation = [

  {
    label: "About",
    url: "/about",
  },
  {
    label: "Now",
    url: "/now",
  },
];
---

<header>
  <Center>
    <nav id="nav">
      <Logo />
      <div class="links">
        {
          navigation.map((item) => (
            <a
              href={item.url}
              data-fathom="nav-link"
              class={topLevelPath === item.url.split("/")[1] ? "active" : ""}
            >
              {item.label}
            </a>
          ))
        }
        <button type="button" data-theme-toggle aria-label="Toggle theme">
          <Icon icon="sun" size="20" variant="line" className="sun" />
          <Icon icon="moon" size="20" variant="line" className="moon" />
        </button>
      </div>
    </nav>
  </Center>
</header>

<script>
  import * as Fathom from "fathom-client";
  import { gray, grayDark } from "@radix-ui/colors";
  import {
    TRANSITION_BEFORE_SWAP,
    isTransitionBeforeSwapEvent,
  } from "astro:transitions/client";

  type Theme = "light" | "dark";

  function getActiveTheme(): Theme {
    return document.body.classList.contains("dark") ? "dark" : "light";
  }

  function setActiveTheme(theme: Theme, document = window.document) {
    theme === "light"
      ? document.body.classList.remove("dark")
      : document.body.classList.add("dark");

    // Update localStorage
    window.localStorage.setItem("theme", theme);

    // Update meta theme
    const metaTheme = document.querySelector('meta[name="theme-color"]');
    if (metaTheme !== null)
      metaTheme.setAttribute(
        "content",
        theme === "dark" ? grayDark.gray1 : gray.gray1
      );
  }

  function setupToggle(document = window.document) {
    let toggleButton = document.querySelector("[data-theme-toggle]");

    toggleButton &&
      toggleButton.addEventListener("click", () => handleToggleTheme());
  }

  function handleToggleTheme() {
    setActiveTheme(getActiveTheme() === "light" ? "dark" : "light");

    Fathom.trackEvent("nav: toggle theme");
  }

  // Run on initial load
  setupToggle();

  document.addEventListener(TRANSITION_BEFORE_SWAP, (ev) => {
    if (isTransitionBeforeSwapEvent(ev)) {
      // Run after view transitions
      setupToggle(ev.newDocument);
      setActiveTheme(getActiveTheme(), ev.newDocument);
    }
  });

  document.addEventListener("astro:page-load", () => {
    document.querySelectorAll("[data-fathom='nav-link']").forEach((navlink) => {
      navlink.addEventListener("click", () => {
        const url = navlink.getAttribute("href");
        Fathom.trackEvent(`nav: click link (${url})`);
      });
    });
  });
</script>

<style lang="scss">
  header {
    width: 100%;
    padding-block: var(--space-s);
    position: sticky;
    background-color: var(--gray-1);
    top: 0;
    z-index: 10;
  }

  nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: var(--space-s);
  }

  .links {
    display: flex;
    align-items: stretch;
    gap: var(--space-2xs);
    margin-inline-end: calc(-1 * var(--space-s));

    a,
    button {
      display: inline-flex;
      align-items: center;
      background: transparent;
      text-decoration: none;
      line-height: 1;
      color: var(--gray-12);
      padding: var(--space-xs) var(--space-s);
      border: none;
      border-radius: var(--radius-full);
      cursor: pointer;
      transition: font-weight 0.2s ease-in-out;

      @media (hover: hover) and (pointer: fine) {
        &:hover {
          font-weight: var(--font-weight-bold);
        }

        &:active {
          transition: none;
        }
      }

      &.active {
        font-weight: var(--font-weight-bold);
      }
    }

    button[data-theme-toggle] {
      justify-content: center;
      position: relative;
      overflow: hidden;
      box-sizing: content-box;
      width: 20px;
      height: 20px;
      padding-inline: var(--space-xs);

      :global(svg) {
        transform-origin: 50% 200%;
        transition:
          transform 0.4s ease-out,
          opacity 0.2s ease-in-out;
        position: absolute;
      }
    }
  }

  :global(body:not(.dark) .moon) {
    transform: rotate(60deg);
  }

  :global(.dark .sun) {
    transform: rotate(-60deg);
  }
</style>
