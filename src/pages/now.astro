---
import { getCollection } from "astro:content";
import dayjs from "dayjs";
import { RelativeDate } from "../components/RelativeDate/RelativeDate";
import ProseLayout from "../layouts/ProseLayout.astro";

const events = await getCollection("now");
events.sort((a, b) => {
  return dayjs(b.data.date).isBefore(dayjs(a.data.date)) ? -1 : 1;
});

const title = "Now";
const description = "Whatâ€™s up to?";
---

<ProseLayout title={title} description={description}>
  <h4>Upcoming</h4>
  <ul class="events">
    {
      events.map(async (event,index) => {
        const { Content } = await event.render();
        if(index===0) {
          return (
          <li class="event">
            <div class="dot" aria-hidden />
            <span class="heading">
              <RelativeDate date={event.data.date} client:load />
            </span>
            <div class="line" aria-hidden />
            <div class="content">
              <Content />
            </div>
          </li>
          );
        } 
        else if(index===1) {
          return(
          <li class="event">
            <div class="dot" aria-hidden />
            <span class="heading">
              <RelativeDate date={event.data.date} client:load />
            </span>
            <div class="content">
              <Content />
            </div>
          </li>
          );
        }
        
      })
    }
    
  </ul>
  <h4>Ongoing</h4>
  <ul class="events">
    {
      events.map(async (event, index) => {
        const { Content } = await event.render();

        if(index!==events.length-1) {
          return (
          <li class="event">
            <div class="dot" aria-hidden />
            <span class="heading">
              <RelativeDate date={event.data.date} client:load />
            </span>
            <div class="line" aria-hidden />
            <div class="content">
              <Content />
            </div>
          </li>
          );
        } 
        else {
          return(
          <li class="event">
            <div class="dot" aria-hidden />
            <span class="heading">
              <RelativeDate date={event.data.date} client:load />
            </span>
            <div class="content">
              <Content />
            </div>
          </li>
          );
        }
        
      })
    }
    
  </ul>
  <style lang="scss">
    .events {
      list-style: none;
      padding: 0;
      display: flex;
      flex-direction: column;
    }

    .event {
      display: grid;
      grid-template-columns: var(--space-s) 1fr;
      grid-template-areas:
        "dot heading"
        "line content";
      column-gap: var(--space-m);
      justify-content: center;

      &::before {
        content: "";
      }
    }

    .dot {
      grid-area: dot;
      border-radius: var(--radius-full);
      width: var(--space-s);
      height: var(--space-s);
      background-color: var(--gray-7);
      place-self: center center;
    }

    .line {
      grid-area: line;
      width: 2px;
      background-color: var(--gray-7);
      position: absolute;
      top: 0;
      bottom: 0;
      justify-self: center;
    }

    .heading {
      color: var(--gray-11);
      grid-area: heading;
    }

    .content {
      grid-area: content;
    }

    .event:not(:last-child) .content {
      padding-block-end: var(--space-xl);
    }
    h4 {
      margin-top: 2rem;
    }
  </style>
</ProseLayout>
